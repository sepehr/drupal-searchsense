<?php
// $Id$

/**
 * @file
 * Implementation of hooks, helpers and API functions for Searchsense.
 */

/**
 * Defines Searchsense's menu path.
 */
define('SEARCHSENSE_PATH', 'searchsense/autocomplete');
define('SEARCHSENSE_JS_PATH', 'js/searchsense/autocomplete');


/**
 * Implements hook_perm().
 */
function searchsense_perm() {
  return array(
    'administer searchsense',
    'use search autocompletion'
  );
}


/**
 * Implements hook_init().
 */
function searchsense_init() {
  // Load searchsense options once per request.
  $GLOBALS['_searchsense'] = variable_get('searchsense_configs', array(
    'min' => 2,
    'limit' => 10,
    'use_js' => 0,
    'options' => array('user', 'block', 'theme'),
  ));

  $GLOBALS['_searchsense']['path'] = module_exists('js') && $GLOBALS['_searchsense']['use_js'] ?
    SEARCHSENSE_JS_PATH :
    SEARCHSENSE_PATH;

  // Also expose the path to JS.
  drupal_add_js(array(
    'searchsense' => array(
      'path' => $GLOBALS['_searchsense']['path'],
    ),
  ), 'setting');
}


/**
 * Implements hook_js().
 */
function searchsense_js() {
  $callbacks = array();

  $callbacks['autocomplete'] = array(
    'callback' => 'searchsense_autocomplete',
    'dependencies' => variable_get('searchsense_js_deps',
      array('user', 'searchsense', 'nodesense')
    ),
  );

  return $callbacks;
}


/**
 * Implements hook_menu().
 */
function searchsense_menu() {
  $items = array();

  $items['admin/settings/search/autocomplete'] = array(
    'title' => 'Search Autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchsense_admin'),
    'access arguments' => array('administer searchsense'),
    'file' => 'searchsense.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items[SEARCHSENSE_PATH] =
  $items[SEARCHSENSE_JS_PATH] = array(
    'title' => 'Searchsense Autocomplete',
    'page callback' => 'searchsense_autocomplete',
    'access arguments' => array('use search autocompletion'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function searchsense_menu_alter($items) {
  $items['admin/settings/search/search'] = $items['admin/settings/search'];
  $items['admin/settings/search/search']['type'] = MENU_DEFAULT_LOCAL_TASK;
}


/**
 * Implements hook_form_alter() for advanced search form.
 */
function searchsense_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'search_form' && user_access('use search autocompletion')) {
    $type = arg(1);
    global $_searchsense;

    if ($type == 'user' && $_searchsense['options']['user']) {
      $form['basic']['inline']['keys']['#autocomplete_path'] = 'user/autocomplete';
    }
    elseif ($type == 'node' && $_searchsense['options']['advanced']) {
      $form['basic']['inline']['keys']['#autocomplete_path'] = $_searchsense['path'];
      foreach (element_children($form['advanced']['keywords']) as $key) {
        $form['advanced']['keywords'][$key]['#autocomplete_path'] = $_searchsense['path'];
      }
    }
  }
}


/**
 * Implements hook_form_alter() for search block form.
 */
function searchsense_form_search_block_form_alter(&$form, $form_state) {
  global $_searchsense;

  if (user_access('use search autocompletion') && $_searchsense['options']['block']) {
    $form['search_block_form']['#autocomplete_path'] = $_searchsense['path'];
  }
}


/**
 * Implements hook_form_alter() for theme search form.
 */
function searchsense_form_search_theme_form_alter(&$form, $form_state) {
  global $_searchsense;

  if (user_access('use search autocompletion') && $_searchsense['options']['theme']) {
    $form['search_theme_form']['#autocomplete_path'] = $_searchsense['path'];
  }
}


/**
 * An extensible search autocomplete callback.
 *
 * @param $a1
 *   Either a string to find results for or the second
 *   argument needed when using js.php and dynosense.
 * @param $a2
 *   If set, it's the string to find results for, and
 *   surely dynosense is making use of js.php right now!
 *
 * @return
 *   A JSON object containing autocomplete suggestions.
 */
function searchsense_autocomplete($a1 = '', $a2 = '') {
  global $_searchsense;

  // Check if the second argument is available.
  if (!empty($a2)) {
    // Skip short strings.
    if ($_searchsense['min'] && !isset($a2[$_searchsense['min']])) {
      return array();
    }

    list($a1, $a2) = array($a2, $a1);
  }
  else {
    // Skip short strings.
    if ($_searchsense['min'] && !isset($a1[$_searchsense['min']])) {
      return array();
    }

    $a2 = arg();
    if ($a2[0] == 'js') {
      array_shift($a2);
    }
    $a2 = (count($a2) > 3) ? $a2[2] : '';
  }

  // Get all suggestions.
  $matches = module_invoke_all('searchsense', $a1, $a2, $_searchsense['limit']);

  // Let 'em alter the suggestions.
  drupal_alter('searchsense', $matches, $a1, $a2);

  // Return the JSON object.
  if (is_array($matches)) {
    $matches = array_filter($matches);
  }

  return drupal_json($matches);
}

