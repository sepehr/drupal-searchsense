<?php
// $Id$

/**
 * @file
 * Implementation of hooks, helpers and API functions for Searchsense.
 */

/**
 * Defines Searchsense's menu path.
 */
define('SEARCHSENSE_PATH', 'searchsense/autocomplete');
define('SEARCHSENSE_JS_PATH', 'js/searchsense/autocomplete');


/**
 * Implements hook_perm().
 */
function searchsense_perm() {
  return array(
    'administer searchsense',
    'use search autocompletion'
  );
}


/**
 * Implements hook_init().
 */
function searchsense_init() {
  // Load searchsense options once per request.
  $GLOBALS['_searchsense'] = variable_get('searchsense_options',
    array('user', 'block', 'theme')
  );

  $GLOBALS['_searchsense']['path'] = module_exists('js') && variable_get('searchsense_use_js', FALSE) ?
    SEARCHSENSE_JS_PATH :
    SEARCHSENSE_PATH;
}


/**
 * Implements hook_js().
 */
function searchsense_js() {
  $callbacks = array();

  $callbacks['autocomplete'] = array(
    'callback' => 'searchsense_autocomplete',
    'dependencies' => variable_get('searchsense_js_deps',
      array('locale', 'user', 'searchsense', 'nodesense')
    ),
  );

  return $callbacks;
}


/**
 * Implements hook_menu().
 */
function searchsense_menu() {
  $items = array();

  $items['admin/settings/search/autocomplete'] = array(
    'title' => 'Search Autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchsense_admin'),
    'access arguments' => array('administer searchsense'),
    'file' => 'searchsense.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items[SEARCHSENSE_PATH] =
  $items[SEARCHSENSE_JS_PATH] = array(
    'title' => 'Searchsense Autocomplete',
    'page callback' => 'searchsense_autocomplete',
    'access arguments' => array('use search autocompletion'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function searchsense_menu_alter($items) {
  $items['admin/settings/search/search'] = $items['admin/settings/search'];
  $items['admin/settings/search/search']['type'] = MENU_DEFAULT_LOCAL_TASK;
}


/**
 * Implements hook_form_alter() for advanced search form.
 */
function searchsense_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'search_form' && user_access('use search autocompletion')) {
    $type = arg(1);
    global $_searchsense;

    if ($type == 'user' && $_searchsense['user']) {
      $form['basic']['inline']['keys']['#autocomplete_path'] = 'user/autocomplete';
    }
    elseif ($type == 'node' && $_searchsense['advanced']) {
      $form['basic']['inline']['keys']['#autocomplete_path'] = $_searchsense['path'];
      foreach (element_children($form['advanced']['keywords']) as $key) {
        $form['advanced']['keywords'][$key]['#autocomplete_path'] = $_searchsense['path'];
      }
    }
  }
}


/**
 * Implements hook_form_alter() for search block form.
 */
function searchsense_form_search_block_form_alter(&$form, $form_state) {
  global $_searchsense;

  if (user_access('use search autocompletion') && $_searchsense['block']) {
    $form['search_block_form']['#autocomplete_path'] = $_searchsense['path'];
  }
}


/**
 * Implements hook_form_alter() for theme search form.
 */
function searchsense_form_search_theme_form_alter(&$form, $form_state) {
  global $_searchsense;

  if (user_access('use search autocompletion') && $_searchsense['theme']) {
    $form['search_theme_form']['#autocomplete_path'] = $_searchsense['path'];
  }
}


/**
 * An extensible search autocomplete callback.
 *
 * @param string
 *   The string to find results for.
 *
 * @return
 *   A JSON object containing autocomplete suggestions.
 */
function searchsense_autocomplete($string = '') {
  $matches = module_invoke_all('searchsense', $string, variable_get('searchsense_limit', 10));
  return drupal_json(array_filter($matches));
}

