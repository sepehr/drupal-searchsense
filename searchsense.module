<?php

/**
 * @file
 * Implementation of hooks, helpers and API functions for Searchsense.
 */

/**
 * Defines Searchsense's menu path.
 */
define('SEARCHSENSE_PATH', 'searchsense/autocomplete');
define('SEARCHSENSE_JS_PATH', 'js/searchsense/autocomplete');

/**
 * Implements hook_perm().
 */
function searchsense_perm() {
  return array(
    'administer searchsense',
    'use search autocompletion',
  );
}

/**
 * Implements hook_init().
 *
 * @todo
 *   Do so in proper form_alter hooks.
 */
function searchsense_init() {
  // Load configs.
  $configs = _searchsense_configs();

  // Also expose the path to JS.
  drupal_add_js(array(
    'searchsense' => array(
      'path' => $configs['path'],
    ),
  ), 'setting');
}

/**
 * Implements hook_js().
 */
function searchsense_js() {
  $callbacks = array();

  $callbacks['autocomplete'] = array(
    'callback' => 'searchsense_autocomplete',
    'dependencies' => variable_get('searchsense_js_deps',
      array('user', 'searchsense', 'nodesense')
    ),
  );

  return $callbacks;
}

/**
 * Implements hook_menu().
 */
function searchsense_menu() {
  $items = array();

  $items['admin/settings/search/autocomplete'] = array(
    'title' => 'Search Autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchsense_admin'),
    'access arguments' => array('administer searchsense'),
    'file' => 'searchsense.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items[SEARCHSENSE_PATH] =
  $items[SEARCHSENSE_JS_PATH] = array(
    'title' => 'Searchsense Autocomplete',
    'page callback' => 'searchsense_autocomplete',
    'access arguments' => array('use search autocompletion'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function searchsense_menu_alter($items) {
  $items['admin/settings/search/search'] = $items['admin/settings/search'];
  $items['admin/settings/search/search']['type'] = MENU_DEFAULT_LOCAL_TASK;
}

/**
 * Implements hook_form_alter().
 */
function searchsense_form_alter(&$form, $form_state, $form_id) {
  if (!user_access('use search autocompletion')) {
    return;
  }

  //Load configs.
  $configs = _searchsense_configs();
  // User and Advanced search forms.
  if ($form_id == 'search_form') {
    $type = arg(1);
    // User search.
    if ($type == 'user' && $configs['options']['user']) {
      $form['basic']['inline']['keys']['#autocomplete_path'] = 'user/autocomplete';
    }
    // Advanced search.
    elseif ($type == 'node' && $configs['options']['advanced']) {
      $form['basic']['inline']['keys']['#autocomplete_path'] = $configs['path'];
      foreach (element_children($form['advanced']['keywords']) as $key) {
        $form['advanced']['keywords'][$key]['#autocomplete_path'] = $configs['path'];
      }
    }
  }
  // Search block.
  elseif ($form_id == 'search_block_form' && $configs['options']['block']) {
    $form['search_block_form']['#autocomplete_path'] = $configs['path'];
  }
  // Theme search.
  elseif ($form_id == 'search_theme_form' && $configs['options']['theme']) {
    $form['search_theme_form']['#autocomplete_path'] = $configs['path'];
  }
}

/**
 * An extensible search autocomplete callback.
 *
 * @param $a1
 *   Either a string to find results for or the second
 *   argument needed when using js.php and dynosense.
 * @param $a2
 *   If set, it's the string to find results for, and
 *   dynosense is making use of js.php for sure.
 *
 * @return
 *   A JSON object containing autocomplete suggestions.
 */
function searchsense_autocomplete($a1 = '', $a2 = '') {
  $configs = _searchsense_configs();

  // Check if the second argument is available.
  if (!empty($a2)) {
    // Skip short strings.
    if (drupal_strlen($a2) < $configs['min']) {
      return drupal_json('');
    }
    list($a1, $a2) = array($a2, $a1);
  }
  else {
    // Skip short strings.
    if (drupal_strlen($a1) < $configs['min']) {
      return drupal_json('');
    }
    $a2 = arg();
    if ($a2[0] == 'js') {
      array_shift($a2);
    }
    $a2 = (count($a2) > 3) ? $a2[2] : '';
  }

  // Get all suggestions.
  $matches = module_invoke_all('searchsense', $a1, $a2, $configs['limit']);
  // Let 'em alter the suggestions.
  drupal_alter('searchsense', $matches, $a1, $a2);
  // Remove empties.
  if (is_array($matches)) {
    $matches = array_filter($matches);
  }

  // Flatten the matches array & return its JSON object.
  return drupal_json(_searchsense_array_flatten($matches));
}

/**
 * Helper function to load module configs.
 *
 * @return
 *   An array of searchsense configs.
 */
function _searchsense_configs() {
  $configs = variable_get('searchsense_configs', array(
    'min' => 1,
    'limit' => 10,
    'use_js' => FALSE,
    'options' => array('user', 'block', 'theme'),
  ));

  $configs['path'] = module_exists('js') && $configs['use_js'] ?
    SEARCHSENSE_JS_PATH :
    SEARCHSENSE_PATH;

  return $configs;
}

/**
 * Helper function to convert a 2D array into a linear one.
 *
 * @param $array
 *   2D array.
 *
 * @return
 *   Corresponding linear array.
 */
function _searchsense_array_flatten($array) {
  if (!is_array($array)) {
    return $array;
  }

  $linear = array();
  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $linear = array_merge($linear, _searchsense_array_flatten($value));
    }
    else {
      $linear[$key] = $value;
    }
  }
  return $linear;
}

